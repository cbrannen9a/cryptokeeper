{"version":3,"sources":["components/Header.js","components/Detail.js","components/List.js","components/NotFound.js","components/App.js","utilities/serviceWorker.js","index.js"],"names":["Header","classes","this","props","react_default","a","createElement","AppBar_default","position","color","Toolbar_default","Typography_default","variant","className","flex","Component","withStyles","flexGrow","Detail","List","NotFound","App","BrowserRouter","components_Header","Switch","Route","exact","path","component","Boolean","window","location","hostname","match","theme","createMuiTheme","ReactDOM","render","MuiThemeProvider_default","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kRAgBMA,mLACI,IACAC,EAAYC,KAAKC,MAAjBF,QAER,OACCG,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAQG,SAAS,SAASC,MAAM,WAC/BL,EAAAC,EAAAC,cAACI,EAAAL,EAAD,KACCD,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAYO,QAAQ,KAAKC,UAAWZ,EAAQa,MAA5C,yBAPgBC,aAqBNC,uBA5BA,CACdF,KAAM,CACLG,SAAU,EACVH,KAAM,IAyBOE,CAAmBhB,GC3BnBkB,mLANb,OACCd,EAAAC,EAAAC,cAAA,mBAHkBS,aCQNI,mLANb,OACCf,EAAAC,EAAAC,cAAA,mBAHgBS,aCQJK,mLANb,OACChB,EAAAC,EAAAC,cAAA,mBAHoBS,aCwBRM,mLAhBb,OACCjB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,KACClB,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAACiB,EAAD,MAEAnB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,KACCpB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWT,IACjCf,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,gBAAgBC,UAAWV,IAC7Cd,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAOG,UAAWR,cAVNL,aCEEc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCPN,IAAMC,EAAQC,2BAEdC,IAASC,OACRjC,EAAAC,EAAAC,cAACgC,EAAAjC,EAAD,CAAkB6B,MAAOA,GACxB9B,EAAAC,EAAAC,cAACiC,EAAD,OAEDC,SAASC,eAAe,SD0GnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.302fe979.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst styles = {\r\n\tflex: {\r\n\t\tflexGrow: 1,\r\n\t\tflex: 1\r\n\t},\r\n};\r\n\r\nclass Header extends Component {\r\n\trender() {\r\n\t\tconst { classes } = this.props;\r\n\r\n\t\treturn (\r\n\t\t\t<AppBar position='static' color='primary'>\r\n\t\t\t\t<Toolbar>\r\n\t\t\t\t\t<Typography variant='h5' className={classes.flex} >\r\n\t\t\t\t\t\tCryptokeeper\r\n\t\t\t\t\t</Typography>\r\n\t\t\t\t</Toolbar>\r\n\t\t\t</AppBar>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nHeader.propTypes = {\r\n\tclasses: PropTypes.object.isRequired,\r\n};\r\n\r\n\r\nexport default withStyles(styles)(Header);","import React, { Component } from 'react';\r\n\r\nclass Detail extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div></div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Detail;","import React, { Component } from 'react';\r\n\r\nclass List extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div></div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default List;","import React, { Component } from 'react';\r\n\r\nclass NotFound extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div></div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default NotFound;","import React, { Component } from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nimport Header from './Header';\nimport Detail from './Detail';\nimport List from './List';\nimport NotFound from './NotFound';\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<BrowserRouter>\n\t\t\t\t<div>\n\t\t\t\t\t<Header />\n\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route exact path=\"/\" component={List} />\n\t\t\t\t\t\t<Route exact path=\"/currency/:id\" component={Detail} />\n\t\t\t\t\t\t<Route component={NotFound} />\n\t\t\t\t\t</Switch>\n\t\t\t\t</div>\n\t\t\t</BrowserRouter>\n\t\t);\n\t}\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport MuiThemeProvider from '@material-ui/core/styles/MuiThemeProvider';\n\nimport App from './components/App';\nimport * as serviceWorker from './utilities/serviceWorker';\n\nconst theme = createMuiTheme();\n\nReactDOM.render(\n\t<MuiThemeProvider theme={theme}>\n\t\t<App />\n\t</MuiThemeProvider>,\n\tdocument.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}